var elSafeZoneAnimalWrapper,
    elFireZoneAnimalWrapper,
    numOfLions = 3,
    numOfWildebeest = 3,
    numOfAnimals = numOfLions + numOfWildebeest,
    raftMaxCapacity = 2,
    raftCrossingDuration = 5000;

var elClass = {
  animal: 'animal',
  animalsWrapper: 'animals-wrapper',
  animalBtnAddRemove: 'btn-add-remove',
  animalDead: 'dead',
  lion: 'lion',
  wildebeest: 'wildebeest',
  raft: 'raft',
  raftContent: 'raft-content',
  raftCrossing: 'crossing',
  raftInSafeZone: 'in-safe-zone',
  raftInFireZone: 'in-fire-zone',
  raftBtnRemoveAll: 'btn-remove-all',
  raftBtnToSafeZone: 'btn-to-safe-zone',
  raftBtnToFireZone: 'btn-to-fire-zone',
  safeZone: 'safe-zone',
  fireZone: 'fire-zone',
  zoneHasRaft: 'has-raft',
  gameover: 'game-over',
  gameoverSuccess: 'success',
  gameoverFailure: 'failed',
  btnRestart: 'btn-restart'
};

var elSel = {
  animal: '.' + elClass.animal,
  animalLion: '.' + elClass.animal + '.' + elClass.lion,
  animalWildebeest: '.' + elClass.animal + '.' + elClass.wildebeest,
  animalBtnAddRemove: '.' + elClass.animalBtnAddRemove,
  btnRestart: '.' + elClass.btnRestart,
  numOfCrossings: '#crossings',
  raft: '.' + elClass.raft,
  raftAnimalWrapper: '.' + elClass.raftContent + ' .' + elClass.animalsWrapper,
  raftBtnRemoveAll: '.' + elClass.raftBtnRemoveAll,
  raftBtnToSafeZone: '.' + elClass.raftBtnToSafeZone,
  raftBtnToFireZone: '.' + elClass.raftBtnToFireZone,
  safeZone: '.' + elClass.safeZone,
  fireZone: '.' + elClass.fireZone,
  safeZoneAnimalWrapper: '.' + elClass.safeZone + ' .' + elClass.animalsWrapper,
  fireZoneAnimalWrapper: '.' + elClass.fireZone + ' .' + elClass.animalsWrapper
};

var raft = {
  el: null,
  elAnimalsWrapper: null,
  elBtnRemoveAll: null,
  elBtnToSafeZone: null,
  elBtnToFireZone: null,
  numOfCrossings: 0,

  init: function () {
    this.el = document.querySelector(elSel.raft);
    this.elAnimalsWrapper = document.querySelector(elSel.raftAnimalWrapper);
    this.elBtnRemoveAll = document.querySelector(elSel.raftBtnRemoveAll);
    this.elBtnToSafeZone = document.querySelector(elSel.raftBtnToSafeZone);
    this.elBtnToFireZone = document.querySelector(elSel.raftBtnToFireZone);

    this.setEventListeners();
    this.setInZone('fire');
  },

  setEventListeners: function () {
    this.elBtnToSafeZone.addEventListener('click', (function () {
      this.crossToZone('safe');
    }).bind(this));
  
    this.elBtnToFireZone.addEventListener('click', (function () {
      this.crossToZone('fire');
    }).bind(this));

    this.elBtnRemoveAll.addEventListener('click', (function () {
      this.moveAnimalsToZone();
    }).bind(this));
  },

  hasCapacity: function () {
    return this.elAnimalsWrapper.querySelectorAll(elSel.animal).length < raftMaxCapacity;
  },

  isInSafeZone: function () {
    return this.el.classList.contains(elClass.raftInSafeZone);
  },

  isInFireZone: function () {
    return this.el.classList.contains(elClass.raftInFireZone);
  },

  addAnimal: function (elAnimal) {
    this.elAnimalsWrapper.prepend(elAnimal);
  },

  setNumOfCrossings: function (numOfCrossings) {
    if (numOfCrossings !== undefined) {
      this.numOfCrossings = numOfCrossings;
    } else {
      this.numOfCrossings++;
    }
    document.querySelector(elSel.numOfCrossings).innerText = this.numOfCrossings;
  },

  setInZone: function (inZone) {
    this.el.classList.remove(elClass.raftCrossing, elClass.raftInFireZone, elClass.raftInSafeZone);
    this.el.classList.add((inZone === 'safe') ? elClass.raftInSafeZone : elClass.raftInFireZone);
  },

  crossToZone: function (toZone) {
    this.setInZone(toZone);
    this.el.classList.add(elClass.raftCrossing);
    zone.removeHasRaft();

    setTimeout((function () {
      this.setNumOfCrossings();
      this.el.classList.remove(elClass.raftCrossing);
      zone.setHasRaft(toZone);
      checkGameStatus();
    }).bind(this), raftCrossingDuration);
  },

  moveAnimalsToZone: function () {
    var elAnimalsInRaft = this.elAnimalsWrapper.querySelectorAll(elSel.animal),
        moveAnimalToZone = this.isInSafeZone() ? 'safe' : 'fire';
  
    Array.from(elAnimalsInRaft).forEach(function (elAnimal) {
      zone.addAnimal(moveAnimalToZone, elAnimal);
    });
  },

  getAnimals: function () {
    return {
      lion: this.elAnimalsWrapper.querySelectorAll(elSel.animalLion).length,
      wildebeest: this.elAnimalsWrapper.querySelectorAll(elSel.animalWildebeest).length
    };
  },

  setAnimalAsDead: function () {
    var elAnimalWildebeest = this.elAnimalsWrapper.querySelectorAll(elSel.animalWildebeest);

    Array.from(elAnimalWildebeest).forEach(function (elAnimal) {
      elAnimal.classList.add(elClass.animalDead);
    });
  },

  reset: function () {
    this.setNumOfCrossings(0);
    this.setInZone('fire');
  }
};

var zone = {
  elFireZone: null,
  elSafeZone: null,
  elFireZoneAnimalWrapper: null,
  elSafeZoneAnimalWrapper: null,

  init: function () {
    this.elFireZone = document.querySelector(elSel.fireZone);
    this.elSafeZone = document.querySelector(elSel.safeZone);
    this.elFireZoneAnimalWrapper = document.querySelector(elSel.fireZoneAnimalWrapper);
    this.elSafeZoneAnimalWrapper = document.querySelector(elSel.safeZoneAnimalWrapper);

    this.setHasRaft('fire');
  },

  addAnimalToFireZone: function (elAnimal) {
    this.elFireZoneAnimalWrapper.append(elAnimal);
  },

  addAnimal: function (toZone, elAnimal) {
    if (toZone === 'safe') {
      this.elSafeZoneAnimalWrapper.append(elAnimal);
    } else {
      this.addAnimalToFireZone(elAnimal);
    }

    checkGameStatus();
  },

  removeHasRaft: function () {
    this.elSafeZone.classList.remove(elClass.zoneHasRaft);
    this.elFireZone.classList.remove(elClass.zoneHasRaft);
  },

  setHasRaft: function (raftInZone) {
    this.removeHasRaft();

    if (raftInZone === 'safe') {
      this.elSafeZone.classList.add(elClass.zoneHasRaft);
    } else {
      this.elFireZone.classList.add(elClass.zoneHasRaft);
    }
  },

  getAnimals: function (inZone) {
    var elAnimalsWrapper = (inZone === 'safe') ? this.elSafeZoneAnimalWrapper : this.elFireZoneAnimalWrapper;

    return {
      lion: elAnimalsWrapper.querySelectorAll(elSel.animalLion).length,
      wildebeest: elAnimalsWrapper.querySelectorAll(elSel.animalWildebeest).length
    };
  },

  setAnimalAsDead: function (inZone) {
    var elAnimalsWrapper = (inZone === 'safe') ? this.elSafeZoneAnimalWrapper : this.elFireZoneAnimalWrapper,
        elAnimalWildebeest = elAnimalsWrapper.querySelectorAll(elSel.animalWildebeest);

    Array.from(elAnimalWildebeest).forEach(function (elAnimal) {
      elAnimal.classList.add(elClass.animalDead);
    });
  },

  isAllAnimalsSafe: function () {
    return this.elSafeZoneAnimalWrapper.querySelectorAll(elSel.animal).length === numOfAnimals;
  },

  reset: function () {
    this.setHasRaft('fire');
  }
};

var animal = {
  elAnimals: null,

  init: function () {
    this.elAnimals = document.getElementsByClassName(elClass.animal);

    for (var i = 0; i < numOfAnimals; i++) {
      var animal = (i < numOfLions) ? 'lion' : 'wildebeest';
      zone.addAnimalToFireZone(this.template(animal));
    }
  },

  addRemoveEvent: function () {
    var elAnimal = this,
        elParentContainer = elAnimal.parentElement.parentElement,
        isAnimalInFireZone = elParentContainer.classList.contains(elClass.fireZone),
        isAnimalInSafeZone = elParentContainer.classList.contains(elClass.safeZone),
        isAnimalInRaft = elParentContainer.classList.contains(elClass.raftContent);

    if (raft.hasCapacity() && ((isAnimalInFireZone && raft.isInFireZone()) || (isAnimalInSafeZone && raft.isInSafeZone()))) {
      raft.addAnimal(elAnimal);
    } else if (isAnimalInRaft) {
      zone.addAnimal((raft.isInSafeZone() ? 'safe' : 'fire'), elAnimal);
    }
  },

  template: function (animal) {
    var elAddIcon = document.createElement('i'),
        elRemoveIcon = document.createElement('i'),
        elAddRemoveBtn = document.createElement('button'),
        elAnimal = document.createElement('li'),
        wrapperClass = elClass.wildebeest,
        text = 'Wildebeest';

    if (animal === 'lion') {
      wrapperClass = elClass.lion;
      text = 'Lion';
    }

    elAddIcon.classList.add('i-plus');
    elRemoveIcon.classList.add('i-minus');

    elAddRemoveBtn.classList.add('icon-btn', elClass.animalBtnAddRemove);
    elAddRemoveBtn.setAttribute('tooltip', 'Add to Raft');
    elAddRemoveBtn.setAttribute('tooltip-remove', 'Remove from Raft');
    elAddRemoveBtn.append(elAddIcon, elRemoveIcon);
    elAddRemoveBtn.addEventListener('click', this.addRemoveEvent);

    elAnimal.classList.add(elClass.animal, wrapperClass);
    elAnimal.append(document.createTextNode(text), elAddRemoveBtn);

    return elAnimal;
  }
};

function restartGame() {
  var elWildebeests = document.getElementsByClassName(elClass.wildebeest),
      elLions = document.getElementsByClassName(elClass.lion),
      elAnimals = Array.from(elLions).concat(Array.from(elWildebeests));

  elAnimals.forEach(function (elAnimal) {
    elAnimal.classList.remove(elClass.animalDead);
    zone.addAnimalToFireZone(elAnimal);
  });

  document.querySelector('body').classList.remove(elClass.gameover, elClass.gameoverFailure, elClass.gameoverSuccess);
  raft.reset();
  zone.reset();
}

function checkGameStatus() {
  var animalsInRaft = raft.getAnimals(),
      activeZone = raft.isInSafeZone() ? 'safe' : 'fire',
      otherZone = (activeZone === 'safe') ? 'fire' : 'safe',
      wildebeestsInActiveZone = animalsInRaft.wildebeest + zone.getAnimals(activeZone).wildebeest,
      wildebeestsInOtherZone = zone.getAnimals(otherZone).wildebeest,
      isDeadInActiveZone = (wildebeestsInActiveZone > 0) && ((animalsInRaft.lion + zone.getAnimals(activeZone).lion) > wildebeestsInActiveZone),
      isDeadInOtherZone = (wildebeestsInOtherZone > 0) && (zone.getAnimals(otherZone).lion > wildebeestsInOtherZone);

  if (isDeadInActiveZone) {
    raft.setAnimalAsDead();
    zone.setAnimalAsDead(activeZone);
  }

  if (isDeadInOtherZone) {
    zone.setAnimalAsDead(otherZone);
  }

  if (isDeadInActiveZone || isDeadInOtherZone) {
    document.querySelector('body').classList.add(elClass.gameover, elClass.gameoverFailure);
  } else if (zone.isAllAnimalsSafe()) {
    document.querySelector('body').classList.add(elClass.gameover, elClass.gameoverSuccess);
  }
}

function init() {
  zone.init();
  raft.init();
  animal.init();

  document.querySelector(elSel.btnRestart).addEventListener('click', restartGame);
}

(function () {
  if (document.addEventListener) {
    document.addEventListener('DOMContentLoaded', init, false);
  } else {
    window.addEventListener('load', init, false);
  }
})();
